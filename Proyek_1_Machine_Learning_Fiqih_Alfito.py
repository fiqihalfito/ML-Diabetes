# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CBS5fywLMd_Hg3K4_9N1PHPuX4dxPLuQ

# **Get data from kaggle**
"""

from google.colab import files
files.upload()

! pip install kaggle
! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download -d iammustafatz/diabetes-prediction-dataset

! unzip diabetes-prediction-dataset.zip

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

diabetes = pd.read_csv('diabetes_prediction_dataset.csv')
diabetes.head()

diabetes.info()

"""# **Exploratory Data Analysis**

## periksa duplikasi
"""

# periksa duplikasi
duplicate_rows_data = diabetes[diabetes.duplicated()]
print("jumlah baris duplikasi: ", duplicate_rows_data.shape)

diabetes = diabetes.drop_duplicates()

diabetes.shape

"""## periksa missing value"""

diabetes.describe()

diabetes.isnull().sum()

# hapus nilai yang tidak perlu
diabetes = diabetes[diabetes['gender'] != 'Other']

diabetes.shape

"""## Univariate Analysis"""

numerical_features = ['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']
categorical_features = ['gender', 'hypertension', 'heart_disease', 'smoking_history', 'diabetes']

print('fitur numerical: ', numerical_features)
print('fitur categorical: ', categorical_features)

"""### Categorical Features"""

for feature in categorical_features:
  count = diabetes[feature].value_counts()
  percent = 100*diabetes[feature].value_counts(normalize=True)
  df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
  print(" ")
  print("<<<===========================================================================================>>>")
  print("<<<===========================================================================================>>>")
  print(" ")
  print(df)
  count.plot(kind='bar', title=feature, figsize=(10, 5));
  
  plt.show()

"""### Numerical Features"""

diabetes[numerical_features].hist(bins=50, figsize=(20,15))
plt.show()

"""## Bivariate Analysis

### **Diabetes and gender**
"""

ax=sns.countplot(x='gender', hue='diabetes', data=diabetes)
ax.bar_label(ax.containers[0])
ax.bar_label(ax.containers[1])
plt.title('Gender and Diabetes')
plt.show()

"""### **Diabetes and age**"""

ax = sns.catplot(kind='box', data=diabetes, x='diabetes', y='age')
ax.set(title='Diabetes and Age')
ax.set_xticklabels(['No Diabetes', 'Diabetes'])

"""### **Diabetes and Hypertension**"""

ax=sns.countplot(x='hypertension', hue='diabetes', data=diabetes)
ax.bar_label(ax.containers[0])
ax.bar_label(ax.containers[1])
plt.title('Hypertension and Diabetes')
plt.show()

"""### **Diabetes and Heart Disease**"""

ax=sns.countplot(x='heart_disease', hue='diabetes', data=diabetes)
ax.bar_label(ax.containers[0])
ax.bar_label(ax.containers[1])
plt.title('Diabetes and Heart Disease')
plt.show()

"""### **Diabetes and Smoking History**"""

ax=sns.countplot(x='smoking_history', hue='diabetes', data=diabetes)
ax.bar_label(ax.containers[0])
ax.bar_label(ax.containers[1])
plt.title('Diabetes and Smoking History')
plt.show()

"""### **Diabetes and BMI**"""

ax = sns.catplot(kind='box', data=diabetes, x='diabetes', y='bmi')
ax.set(title='Diabetes and BMI')
ax.set_xticklabels(['No Diabetes', 'Diabetes'])

"""### **Diabetes and HbA1c Level**"""

ax = sns.catplot(data=diabetes, x='diabetes', y='HbA1c_level', kind='box')
ax.set(title='Diabetes and HbA1c Level')
ax.set_xticklabels(['No Diabetes', 'Diabetes'])

"""### **Diabetes and Blood Glucose Level**"""

ax = sns.catplot(data=diabetes, x='diabetes', y='blood_glucose_level', kind='box')
ax.set(title='Diabetes and Blood Glucose Level')
ax.set_xticklabels(['No Diabetes', 'Diabetes'])

"""## Multivariate Analysis

### Numerical Features
"""

plt.figure(figsize=(10, 8))
correlation_matrix = diabetes.corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""drop fitur dengan korelasi paling kecil yaitu fitur 'heart_disease'"""

diabetes.drop(['heart_disease'], inplace=True, axis=1)
diabetes.head()

"""# Data Preparation

## Encoding Fitur Kategori
"""

diabetes.info()

diabetes.head()

from sklearn.preprocessing import OneHotEncoder

diabetes = pd.concat([diabetes, pd.get_dummies(diabetes['gender'], prefix='gender')],axis=1)
diabetes = pd.concat([diabetes, pd.get_dummies(diabetes['smoking_history'], prefix='smoking_history')],axis=1)

diabetes.drop(['gender', 'smoking_history'], axis=1, inplace=True)
diabetes.head()

"""## Train-Test-Split"""

from sklearn.model_selection import train_test_split
 
X = diabetes.drop(["diabetes"],axis=1)
y = diabetes["diabetes"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""## Standarisasi"""

from sklearn.preprocessing import StandardScaler
 
numerical_features = ['age', 'bmi', 'HbA1c_level', 'blood_glucose_level']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(2)

"""# **Model Development**"""

from sklearn.metrics import accuracy_score, confusion_matrix

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(columns=['train_accuracy_score', 'test_accuracy_score'], 
                      index=['KNN', 'RandomForest', 'Boosting'])

"""## Model K-Nearest Neighbor"""

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
knn.fit(X_train, y_train)

models.loc['KNN', 'train_accuracy_score'] = accuracy_score(y_pred=knn.predict(X_train), y_true=y_train).round(4)

"""## Model Random Forest"""

# Impor library yang dibutuhkan
from sklearn.ensemble import RandomForestClassifier

 
# buat model prediksi
# RF = RandomForestClassifier(n_estimators=78, max_depth=13)
RF = RandomForestClassifier()
RF.fit(X_train, y_train)
 
models.loc['RandomForest', 'train_accuracy_score'] = accuracy_score(y_pred=RF.predict(X_train), y_true=y_train).round(4)

"""## Model Boosting"""

from sklearn.ensemble import AdaBoostClassifier
 
boosting = AdaBoostClassifier()                             
boosting.fit(X_train, y_train)
models.loc['Boosting', 'train_accuracy_score'] = accuracy_score(y_pred=boosting.predict(X_train), y_true=y_train).round(4)

"""# **Evaluasi Model**"""

# sebelum standarisasi data uji
X_test.describe().round(2)

# standarisasi data uji
# Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# setelah standarisasi data uji
X_test.describe().round(2)

"""prediksi data uji dan hitung accuracy_score untuk data uji"""

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RandomForest': RF, 'Boosting': boosting}

# buat df untuk membantu membuat confusion matrix
y_preds = pd.DataFrame(columns=['KNN', 'RandomForest', 'Boosting'])


for name, model in model_dict.items():
  # prediksi data uji dengan model
  y_pred = model.predict(X_test)
  
  # simpan test_accuracy_score berdasarkan nama model
  models.loc[name, 'test_accuracy_score'] = accuracy_score(y_pred=y_pred, y_true=y_test).round(4)

  # simpan setiap prediksi berdasarkan nama model
  y_preds[name] = y_pred

models